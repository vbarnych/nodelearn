'use strict';

var inherits = function inherits(child, base) {
  child.super_ = base;
  Object.setPrototypeOf(child.prototype, base.prototype);
}; // Override method: save old to `fn.inherited`
// Previous function will be accessible by obj.fnName.inherited
//   obj - <Object>, containing method to override
//   fn - <Function>, name will be used to find method


var override = function override(obj, fn) {
  fn.inherited = obj[fn.name];
  obj[fn.name] = fn;
}; // Mixin for ES6 classes without overriding existing methods
//   target - <Object>, mixin to target
//   source - <Object>, source methods


var mixin = function mixin(target, source) {
  var methods = Object.getOwnPropertyNames(source);
  var mix = {};
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = methods[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var method = _step.value;

      if (!target[method]) {
        mix[method] = source[method];
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  Object.assign(target, mix);
};

module.exports = {
  inherits: inherits,
  override: override,
  mixin: mixin
};