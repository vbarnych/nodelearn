'use strict'; // Split array into two parts
//   index - <number>, index defining end of first part and start of second
//   array - <Array>, to be split
// Returns: <Array>, tuple with two parts of the array

var splitAt = function splitAt(index, array) {
  var part1 = array.slice(0, index);
  var part2 = array.slice(index, array.length);
  return [part1, part2];
}; // Shuffle an array
//   arr - <Array>
// Returns: <Array>


var shuffle = function shuffle(arr) {
  return arr.sort(function () {
    return Math.random() - 0.5;
  });
}; // Generate int array from given range
//   from - <number>, range start
//   to - <number>, range end
// Returns: <Array>
//
// Example: range(1, 5)
// Result: [1, 2, 3, 4, 5]


var range = function range(from, to) {
  if (to < from) return [];
  var len = to - from + 1;
  var range = new Array(len);

  for (var i = from; i <= to; i++) {
    range[i - from] = i;
  }

  return range;
}; // Generate int array from sequence syntax
//   seq - <Array>
//   max - <number>, (optional) max
// Returns: <Array>
//
// Example: list: sequence([81, 82, 83])
// Result: [81, 82, 83]
// Example: range from..to: sequence([81,,83]) = [81, 82, 83]
// Result: [81, 82, 83]
// Example: range from..count: sequence([81, [3]]) = [81, 82, 83]
// Result: [81, 82, 83]
// Example: range from..max-to: sequence([81, [-2]], 5) = [81, 82, 83]
// Result: [81, 82, 83]


var sequence = function sequence(seq, max) {
  var from = seq[0];
  var to = seq[1];
  var res = seq;

  if (Array.isArray(to)) {
    var count = to[0] < 0 ? max + to[0] : to[0];
    res = range(from, from + count - 1);
  } else if (!to) {
    to = seq[2];
    res = range(from, to);
  }

  return res;
}; // Get last element of array
//   arr - <Array>
// Returns: <any>, element


var last = function last(arr) {
  return arr[arr.length - 1];
};

module.exports = {
  splitAt: splitAt,
  shuffle: shuffle,
  range: range,
  sequence: sequence,
  last: last
};