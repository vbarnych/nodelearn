'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var unicodeCategories = require('./unicode-categories');

var unicodeRangesIncludes = function unicodeRangesIncludes(ranges, codePoint) {
  var left = 0;
  var right = ranges.length - 1;

  while (left <= right) {
    var mid = left + right >>> 1;
    var value = ranges[mid];

    if (typeof value === 'number') {
      if (codePoint > value) left = mid + 1;else if (codePoint < value) right = mid - 1;else return true;
    } else if (codePoint > value[1]) {
      left = mid + 1;
    } else if (codePoint < value[0]) {
      right = mid - 1;
    } else {
      return true;
    }
  }

  return false;
};

var stringIncludesChars = function stringIncludesChars(str, ranges, charsNumber) {
  var number = 0;
  var utf16singleUnit = 1 << 16;

  for (var index = 0; index <= str.length - (charsNumber - number); index++) {
    var codePoint = str.codePointAt(index);
    if (codePoint >= utf16singleUnit) index++;

    if (unicodeRangesIncludes(ranges, codePoint) && ++number === charsNumber) {
      return true;
    }
  }

  return false;
};

var passwordTests = {
  MIN_LENGTH: {
    test: function test(password, options) {
      return password.length >= options.minLength;
    },
    hint: function hint(options) {
      return {
        name: 'MIN_LENGTH',
        minLength: options.minLength
      };
    },
    options: {
      minLength: 10
    }
  },
  MAX_LENGTH: {
    test: function test(password, options) {
      return password.length <= options.maxLength;
    },
    hint: function hint(options) {
      return {
        name: 'MAX_LENGTH',
        maxLength: options.maxLength
      };
    },
    options: {
      maxLength: 128
    }
  },
  MIN_PASSPHRASE_LENGTH: {
    test: function test(password, options) {
      return password.length >= options.minLength;
    },
    hint: function hint(options) {
      return {
        name: 'MIN_PASSPHRASE_LENGTH',
        minLength: options.minLength
      };
    },
    options: {
      minLength: 20
    }
  },
  MAX_REPEATED_CHARS: {
    test: function test(password, options) {
      var regexp = new RegExp("(.)\\1{".concat(options.number, ",}"));
      return !regexp.test(password);
    },
    hint: function hint(options) {
      return {
        name: 'MAX_REPEATED_CHARS',
        number: options.number
      };
    },
    options: {
      number: 2
    }
  },
  MIN_LOWERCASE_CHARS: {
    test: function test(password, option) {
      return stringIncludesChars(password, unicodeCategories.Ll, option.number);
    },
    hint: function hint(options) {
      return {
        name: 'MIN_LOWERCASE_CHARS',
        number: options.number
      };
    },
    options: {
      number: 1
    }
  },
  MIN_UPPERCASE_CHARS: {
    test: function test(password, options) {
      return stringIncludesChars(password, unicodeCategories.Lu, options.number);
    },
    hint: function hint(options) {
      return {
        name: 'MIN_UPPERCASE_CHARS',
        number: options.number
      };
    },
    options: {
      number: 1
    }
  },
  MIN_NUMBERS: {
    test: function test(password, options) {
      var NUMBERS_RANGE = [[49, 57]];
      return stringIncludesChars(password, NUMBERS_RANGE, options.number);
    },
    hint: function hint(options) {
      return {
        name: 'MIN_NUMBERS',
        number: options.number
      };
    },
    options: {
      number: 1
    }
  },
  MIN_SPECIAL_CHARS: {
    test: function test(password, options) {
      var SPECIAL_CHARS_RANGE = [[32, 47], [58, 64], [91, 96], [123, 126]]; // https://www.owasp.org/index.php/Password_special_characters

      return stringIncludesChars(password, SPECIAL_CHARS_RANGE, options.number);
    },
    hint: function hint(options) {
      return {
        name: 'MIN_SPECIAL_CHARS',
        number: options.number
      };
    },
    options: {
      number: 1
    }
  }
};
var loginTests = {
  MIN_LENGTH: {
    test: function test(login, options) {
      return login.length >= options.minLength;
    },
    hint: function hint(options) {
      return {
        name: 'MIN_LENGTH',
        minLength: options.minLength
      };
    },
    options: {
      minLength: 6
    }
  },
  MAX_LENGTH: {
    test: function test(login, options) {
      return login.length <= options.maxLength;
    },
    hint: function hint(options) {
      return {
        name: 'MAX_LENGTH',
        maxLength: options.maxLength
      };
    },
    options: {
      maxLength: 50
    }
  },
  IS_EMAIL: {
    test: function test(login) {
      var EMAIL_REGEXP = new RegExp('^[a-z0-9!#$%&\'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&\'*+/=?^_`{|}~-]+)*@(' + '?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$');
      var MAX_DOMAIN_LENGTH = 255;
      var MAX_LOCAL_PART_LENGTH = 64;

      if (login.includes('@')) {
        var _login$split = login.split('@'),
            _login$split2 = _slicedToArray(_login$split, 2),
            localPart = _login$split2[0],
            domain = _login$split2[1];

        return domain.length <= MAX_DOMAIN_LENGTH && localPart.length <= MAX_LOCAL_PART_LENGTH && EMAIL_REGEXP.test(login);
      }

      return false;
    },
    hint: function hint() {
      return {
        name: 'IS_EMAIL'
      };
    }
  }
};
var loginPasswordTests = {
  LOGIN_INCLUDES_PASSWORD: {
    test: function test(login, password) {
      return !login.includes(password);
    },
    hint: function hint() {
      return {
        name: 'LOGIN_INCLUDES_PASSWORD'
      };
    }
  },
  PASSWORD_INCLUDES_LOGIN: {
    test: function test(login, password) {
      return !password.includes(login);
    },
    hint: function hint() {
      return {
        name: 'PASSWORD_INCLUDES_LOGIN'
      };
    }
  }
};

var AuthenticationStrength = // AuthenticationStrength constructor
//   valid - <boolean>
//   hints - <Object>
//     required - <Array>
//     optional - <Array>
//   compliance - <number>, ratio of passed optional tests
//                to all optional tests
function AuthenticationStrength(valid, hints, compliance) {
  _classCallCheck(this, AuthenticationStrength);

  this.valid = valid;
  this.hints = hints;

  if (!valid) {
    this.strength = 'Not valid';
  } else if (compliance < 0.25) {
    this.strength = 'Very weak';
  } else if (compliance < 0.4) {
    this.strength = 'Weak';
  } else if (compliance < 0.6) {
    this.strength = 'Good';
  } else if (compliance < 0.8) {
    this.strength = 'Strong';
  } else {
    this.strength = 'Very strong';
  }
}; // Function that checks the arguments on a test suite
//   tests - <Array>, of password/login tests
//   required - <Array>, required tests configs
//   optional - <Array>, optional tests configs
//   testArgs - <Array>, [password] / [login] / [login, password]
// Returns: <AuthenticationStrength>


var makeTest = function makeTest(tests, required, optional) {
  for (var _len = arguments.length, testArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    testArgs[_key - 3] = arguments[_key];
  }

  var test = function test(testsConfig) {
    var testsHints = [];
    testsConfig.forEach(function (testConfig) {
      var _ref = typeof testConfig === 'string' ? [testConfig, {}] : [testConfig.name, testConfig],
          _ref2 = _slicedToArray(_ref, 2),
          testName = _ref2[0],
          userOptions = _ref2[1];

      var _tests$testName = tests[testName],
          test = _tests$testName.test,
          hint = _tests$testName.hint,
          _tests$testName$optio = _tests$testName.options,
          options = _tests$testName$optio === void 0 ? {} : _tests$testName$optio;
      var testOptions = Object.assign({}, options, userOptions);
      if (!test.apply(void 0, testArgs.concat([testOptions]))) testsHints.push(hint(testOptions));
    });
    return testsHints;
  };

  var requiredHints = test(required);
  var optionalHints = test(optional);
  var valid = !requiredHints.length;
  var compliance = optional.length ? 1 - optionalHints.length / optional.length : 1;
  var hints = {
    required: requiredHints,
    optional: optionalHints
  };
  return new AuthenticationStrength(valid, hints, compliance);
}; // Function that tests the login
//   login - <string>, login to test
//   required - <Array>, required tests configs
//   optional - <Array>, optional tests configs, defalult: `[]`
// Returns: <AuthenticationStrength>


var checkLogin = function checkLogin(login, required) {
  var optional = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  if (!required) {
    required = ['MIN_LENGTH', 'MAX_LENGTH'];
  }

  return makeTest(loginTests, required, optional, login);
}; // Function that tests the password
//   password - <string>, password to test
//   required - <Array>, required tests configs
//   optional - <Array>, optional tests configs, default: `[]`
// Returns: <AuthenticationStrength>


var checkPassword = function checkPassword(password, required) {
  var optional = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  if (!required) {
    required = ['MIN_LENGTH', 'MAX_LENGTH'];
    optional = ['MIN_NUMBERS', 'MIN_SPECIAL_CHARS', 'MIN_UPPERCASE_CHARS', 'MIN_LOWERCASE_CHARS'];
  }

  return makeTest(passwordTests, required, optional, password);
}; // Function that tests the login with password
//   login - <string>, login to test
//   password - <string>, password to test
//   required - <Array>, required tests configs
//   optional - <Array>, optional tests configs, default: `[]`
// Returns: <AuthenticationStrength>


var checkLoginPassword = function checkLoginPassword(login, password, required) {
  var optional = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

  if (!required) {
    required = ['PASSWORD_INCLUDES_LOGIN', 'LOGIN_INCLUDES_PASSWORD'];
  }

  return makeTest(loginPasswordTests, required, optional, login, password);
};

module.exports = {
  checkLogin: checkLogin,
  checkPassword: checkPassword,
  checkLoginPassword: checkLoginPassword
};