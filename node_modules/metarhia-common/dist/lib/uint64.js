'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var UINT32_MAX = 0xffffffff;
var charToNum = {
  0: 0,
  1: 1,
  2: 2,
  3: 3,
  4: 4,
  5: 5,
  6: 6,
  7: 7,
  8: 8,
  9: 9,
  a: 10,
  A: 10,
  b: 11,
  B: 11,
  c: 12,
  C: 12,
  d: 13,
  D: 13,
  e: 14,
  E: 14,
  f: 15,
  F: 15
};

var Uint64 =
/*#__PURE__*/
function () {
  function Uint64(value) {
    _classCallCheck(this, Uint64);

    this.value = new Uint32Array(2);

    if (value instanceof Uint64) {
      this.value[0] = value.value[0];
      this.value[1] = value.value[1];
      return;
    }

    var numValue = Number(value);

    if (Number.isNaN(numValue) || numValue <= 0) {
      return;
    }

    if (numValue <= UINT32_MAX) {
      this.value[0] = numValue;
    } else if (numValue <= Number.MAX_SAFE_INTEGER) {
      this.value[0] = numValue % (UINT32_MAX + 1);
      this.value[1] = Math.floor(numValue / (UINT32_MAX + 1));
    } else if (typeof value === 'string') {
      var radix = 10;

      if (value.startsWith('0x')) {
        radix = 16;
      } else if (value.startsWith('0o')) {
        radix = 8;
      } else if (value.startsWith('0b')) {
        radix = 2;
      }

      var uintRadix = new Uint64(radix);
      var res = new Uint64();

      for (var i = 0; i < value.length; i++) {
        var digit = charToNum[value[i]];
        var uintDigit = new Uint64(digit);
        res = Uint64.mult(res, uintRadix).add(uintDigit);
      }

      this.value[0] = res.value[0];
      this.value[1] = res.value[1];
    }
  }

  _createClass(Uint64, [{
    key: "toUint32",
    value: function toUint32() {
      return this.value[0];
    }
  }, {
    key: "add",
    value: function add(b) {
      var tmp = this.value[0] + b.value[0];
      this.value[0] = tmp;
      this.value[1] += b.value[1] + Math.floor(tmp / (UINT32_MAX + 1));
      return this;
    }
  }, {
    key: "sub",
    value: function sub(b) {
      if (b.value[0] > this.value[0]) {
        this.value[1]--;
        this.value[0] = ~this.value[0] + 1;
      }

      this.value[0] -= b.value[0];
      this.value[1] -= b.value[1];
      return this;
    }
  }, {
    key: "and",
    value: function and(b) {
      this.value[0] = this.value[0] & b.value[0];
      this.value[1] = this.value[1] & b.value[1];
      return this;
    }
  }, {
    key: "or",
    value: function or(b) {
      this.value[0] = this.value[0] | b.value[0];
      this.value[1] = this.value[1] | b.value[1];
      return this;
    }
  }, {
    key: "not",
    value: function not() {
      this.value[0] = ~this.value[0];
      this.value[1] = ~this.value[1];
      return this;
    }
  }, {
    key: "xor",
    value: function xor(b) {
      this.value[0] = this.value[0] ^ b.value[0];
      this.value[1] = this.value[1] ^ b.value[1];
      return this;
    }
  }, {
    key: "shiftRight",
    value: function shiftRight(b) {
      b %= 64;

      if (b >= 32) {
        this.value[0] = this.value[1] >>> b - 32;
        this.value[1] = 0;
        return this;
      }

      var mask = (1 << b) - 1;
      var tr = (this.value[1] & mask) << 32 - b;
      this.value[1] = this.value[1] >>> b;
      this.value[0] = this.value[0] >>> b | tr;
      return this;
    }
  }, {
    key: "shiftLeft",
    value: function shiftLeft(b) {
      b %= 64;

      if (b >= 32) {
        this.value[1] = this.value[0] << b - 32;
        this.value[0] = 0;
        return this;
      }

      var mask = (1 << b) - 1 << 32 - b;
      var tr = (this.value[0] & mask) >>> 32 - b;
      this.value[0] = this.value[0] << b;
      this.value[1] = this.value[1] << b | tr;
      return this;
    }
  }, {
    key: "inc",
    value: function inc() {
      return this.add(new Uint64(1));
    }
  }, {
    key: "dec",
    value: function dec() {
      return this.sub(new Uint64(1));
    }
  }, {
    key: "toString",
    value: function toString() {
      var radix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;

      if (radix < 2 || radix > 36) {
        throw new RangeError('toString() radix argument must be between 2 and 36');
      }

      var digitStr = '0123456789abcdefghijklmnopqrstuvwxyz';
      var result = '';

      if (radix === 2 || radix === 16) {
        var _value = this.value[0];

        while (_value !== 0) {
          result = digitStr[_value % radix] + result;
          _value = Math.floor(_value / radix);
        }

        _value = this.value[1];

        if (_value !== 0) {
          var pad = radix === 2 ? '00000000000000000000000000000000' : '00000000';
          result = (pad + result).slice(-pad.length);
        }

        while (_value !== 0) {
          result = digitStr[_value % radix] + result;
          _value = Math.floor(_value / radix);
        }

        if (result.length === 0) {
          result = '0';
        }

        return result;
      }

      var zero = new Uint64();
      var value = new Uint64(this);
      var uintRadix = new Uint64(radix);

      while (Uint64.cmp(value, zero) !== 0) {
        var digit = Uint64.mod(value, uintRadix).value[0];
        result = digitStr[digit] + result;
        value = Uint64.div(value, uintRadix);
      }

      if (result.length === 0) {
        result = '0';
      }

      return result;
    }
  }], [{
    key: "add",
    value: function add(a, b) {
      return new Uint64(a).add(b);
    }
  }, {
    key: "sub",
    value: function sub(a, b) {
      return new Uint64(a).sub(b);
    }
  }, {
    key: "mult",
    value: function mult(a, b) {
      var result = new Uint64();
      var value = b.value[0];
      var bitIndex = 0;

      while (value) {
        if (value & 1) {
          result.add(Uint64.shiftLeft(a, bitIndex));
        }

        bitIndex++;
        value >>>= 1;
      }

      value = b.value[1];
      bitIndex = 32;

      while (value) {
        if (value & 1) {
          result.add(Uint64.shiftLeft(a, bitIndex));
        }

        bitIndex++;
        value >>>= 1;
      }

      return result;
    }
  }, {
    key: "cmp",
    value: function cmp(a, b) {
      if (a.value[1] > b.value[1]) {
        return 1;
      } else if (a.value[1] < b.value[1]) {
        return -1;
      } else if (a.value[0] === b.value[0]) {
        return 0;
      }

      return a.value[0] > b.value[0] ? 1 : -1;
    }
  }, {
    key: "_division",
    value: function _division(n, d) {
      var zero = new Uint64();
      var one = new Uint64(1);

      if (Uint64.cmp(d, zero) === 0) {
        throw new RangeError('Uint64: division by zero');
      }

      var cmp = Uint64.cmp(d, n);
      if (cmp > 0) return [zero, n];else if (cmp === 0) return [one, zero];
      var q = new Uint64();
      var r = new Uint64();

      for (var i = 63; i >= 0; i--) {
        r.shiftLeft(1);
        var valIndex = i >>> 5;
        var nval = n.value[valIndex];
        var ii = i < 32 ? i : i - 32;
        r.value[0] = r.value[0] & ~1 | (nval & 1 << ii) >>> ii;

        if (Uint64.cmp(r, d) >= 0) {
          r.sub(d);
          q.value[valIndex] |= 1 << ii;
        }
      }

      return [q, r];
    }
  }, {
    key: "div",
    value: function div(a, b) {
      return Uint64._division(a, b)[0];
    }
  }, {
    key: "mod",
    value: function mod(a, b) {
      return Uint64._division(a, b)[1];
    }
  }, {
    key: "and",
    value: function and(a, b) {
      return new Uint64(a).and(b);
    }
  }, {
    key: "or",
    value: function or(a, b) {
      return new Uint64(a).or(b);
    }
  }, {
    key: "not",
    value: function not(a) {
      return new Uint64(a).not();
    }
  }, {
    key: "xor",
    value: function xor(a, b) {
      return new Uint64(a).xor(b);
    }
  }, {
    key: "shiftRight",
    value: function shiftRight(a, b) {
      return new Uint64(a).shiftRight(b);
    }
  }, {
    key: "shiftLeft",
    value: function shiftLeft(a, b) {
      return new Uint64(a).shiftLeft(b);
    }
  }]);

  return Uint64;
}();

module.exports = {
  Uint64: Uint64
};