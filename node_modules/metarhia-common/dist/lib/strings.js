'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var path = require('path');

var _require = require('./data'),
    getByPath = _require.getByPath;

var _require2 = require('./time'),
    nowDateTime = _require2.nowDateTime;

var HTML_ESCAPE_REGEXP = new RegExp('[&<>"\'/]', 'g');
var HTML_ESCAPE_CHARS = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  '\'': '&#39;'
};
var ALPHA_UPPER = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
var ALPHA_LOWER = 'abcdefghijklmnopqrstuvwxyz';
var ALPHA = ALPHA_UPPER + ALPHA_LOWER;
var DIGIT = '0123456789';
var ALPHA_DIGIT = ALPHA + DIGIT; // Escape html characters
//   content - <string>, to escape
// Returns: <string>
//
// Example: htmlEscape('5>=5') = '5&lt;=5'

var htmlEscape = function htmlEscape(content) {
  return content.replace(HTML_ESCAPE_REGEXP, function (char) {
    return HTML_ESCAPE_CHARS[char];
  });
}; // Substitute variables
//   tpl - <string>, template body
//   data - <Object>, hash, data structure to visualize
//   dataPath - <string>, current position in data structure
//   escapeHtml - <boolean>, escape html special characters if true
// Returns: <string>


var subst = function subst(tpl, data, dataPath, escapeHtml) {
  var start = 0;
  var end = tpl.indexOf('@');
  if (end === -1) return tpl;
  var defaultData = getByPath(data, dataPath);
  var result = '';

  while (end !== -1 && start < tpl.length) {
    result += tpl.substring(start, end);
    start = end + 1;
    end = tpl.indexOf('@', start);

    if (end === -1) {
      start--;
      break;
    }

    var key = void 0;
    var d = void 0;

    if (tpl.charAt(start) !== '.') {
      key = tpl.slice(start, end);
      d = data;
    } else {
      key = tpl.slice(start + 1, end);
      d = defaultData;
    }

    var value = getByPath(d, key);

    if (value === undefined && key === '.value') {
      value = d;
    }

    if (value === null) {
      value = '[null]';
    } else if (value === undefined) {
      value = '[undefined]';
    } else if (_typeof(value) === 'object') {
      var parentName = value.constructor.name;

      if (parentName === 'Date') {
        value = nowDateTime(value);
      } else if (parentName === 'Array') {
        value = '[array]';
      } else {
        value = '[object]';
      }
    }

    result += escapeHtml ? htmlEscape(value) : value;
    start = end + 1;
    end = tpl.indexOf('@', start);
  }

  if (start < tpl.length && end === -1) {
    result += tpl.substring(start);
  }

  end = tpl.indexOf('@', start);
  return result;
}; // Extract file extension in lower case without dot
//   fileName - <string>, file name
// Returns: <string>
//
// Example: fileExt('/dir/file.txt')
// Result: 'txt'


var fileExt = function fileExt(fileName) {
  return path.extname(fileName).replace('.', '').toLowerCase();
}; // Remove file extension from file name
//   fileName - <string>, file name
// Returns: <string>
//
// Example: fileExt('file.txt')
// Result: 'file'


var removeExt = function removeExt(fileName) {
  return fileName.substr(0, fileName.lastIndexOf('.'));
};

var CAPITALIZE_REGEXP = /\w+/g; // Capitalize string
//   s - <string>
// Returns: <string>

var capitalize = function capitalize(s) {
  return s.replace(CAPITALIZE_REGEXP, function (word) {
    return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();
  });
};

var UNDERLINE_REGEXP = /_/g; // Convert spinal case to camel case
//   name - <string>
// Returns: <string>

var spinalToCamel = function spinalToCamel(name) {
  return name.replace(UNDERLINE_REGEXP, '-').split('-').map(function (part, i) {
    return i > 0 ? capitalize(part) : part;
  }).join('');
};

var ESCAPE_REGEXP_SPECIALS = [// order matters for these
'-', '[', ']', // order doesn't matter for any of these
'/', '{', '}', '(', ')', '*', '+', '?', '.', '\\', '^', '$', '|'];
var ESCAPE_REGEXP = new RegExp('[' + ESCAPE_REGEXP_SPECIALS.join('\\') + ']', 'g'); // Escape regular expression control characters
//   s - <string>
// Returns: <string>
//
// Example: escapeRegExp('/path/to/res?search=this.that')

var escapeRegExp = function escapeRegExp(s) {
  return s.replace(ESCAPE_REGEXP, '\\$&');
}; // Generate escaped regular expression
//   s - <string>
// Returns: <RegExp>


var newEscapedRegExp = function newEscapedRegExp(s) {
  return new RegExp(escapeRegExp(s), 'g');
}; // Add trailing slash at the end if there isn't one
//   s - <string>
// Returns: <string>


var addTrailingSlash = function addTrailingSlash(s) {
  return s + (s.endsWith('/') ? '' : '/');
}; // Remove trailing slash from string
//   s - <string>
// Returns: <string>


var stripTrailingSlash = function stripTrailingSlash(s) {
  return s.endsWith('/') ? s.substr(0, s.length - 1) : s;
}; // Get directory name with trailing slash from path
//   filePath - <string>
// Returns: <string>


var dirname = function dirname(filePath) {
  var dir = path.dirname(filePath);
  if (dir !== '/') dir += '/';
  return dir;
}; // Extract substring between prefix and suffix
//   s - <string>, source
//   prefix - <string>, before needed fragment
//   suffix - <string>, after needed fragment
// Returns: <string>


var between = function between(s, prefix, suffix) {
  var i = s.indexOf(prefix);
  if (i === -1) return '';
  s = s.substring(i + prefix.length);

  if (suffix) {
    i = s.indexOf(suffix);
    if (i === -1) return '';
    s = s.substring(0, i);
  }

  return s;
};

var BOM_REGEXP = /^[\uBBBF\uFEFF]*/; // Remove UTF-8 BOM
//   s - <string>, possibly starts with BOM
// Returns: <string>

var removeBOM = function removeBOM(s) {
  return typeof s === 'string' ? s.replace(BOM_REGEXP, '') : s;
};

var ITEM_ESCAPE_REGEXP = /\\\*/g; // Generate RegExp from array with '*' wildcards
//   items - <string[]>
// Returns: <RegExp>
//
// Example: ['/css/*', '/index.html']

var arrayRegExp = function arrayRegExp(items) {
  if (!items || items.length === 0) return null;
  items = items.map(function (item) {
    return escapeRegExp(item).replace(ITEM_ESCAPE_REGEXP, '.*');
  });
  var ex = items.length === 1 ? items[0] : '((' + items.join(')|(') + '))';
  return new RegExp('^' + ex + '$');
}; // Split string by the first occurrence of separator
//   s - <string>
//   separator - <string>, or char
// Returns: <string[]>
//
// Example: rsection('All you need is JavaScript', 'is')
// Result: ['All you need ', ' JavaScript']


var section = function section(s, separator) {
  var i = s.indexOf(separator);
  if (i < 0) return [s, ''];
  return [s.slice(0, i), s.slice(i + separator.length)];
}; // Split string by the last occurrence of separator
//   s - <string>
//   separator - <string>, or char
// Returns: <string[]>
//
// Example: rsection('All you need is JavaScript', 'a')
// Result: ['All you need is Jav', 'Script']


var rsection = function rsection(s, separator) {
  var i = s.lastIndexOf(separator);
  if (i < 0) return [s, ''];
  return [s.slice(0, i), s.slice(i + separator.length)];
}; // Split string by multiple occurrence of separator
//   s - <string>
//   separator - <string>, (optional), default: ','
//   limit - <number>, (optional), default: -1 max length of result array
// Returns: <string[]>
//
// Example: split('a,b,c,d')
// Result: ['a', 'b', 'c', 'd']
// Example: split('a,b,c,d', ',', 2)
// Result: ['a', 'b']


var split = function split(s) {
  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';
  var limit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
  return s.split(separator, limit);
}; // Split string by multiple occurrences of separator
//   s - <string>
//   separator - <string>, (optional), default: ','
//   limit - <number>, (optional), default: -1 max length of result array
// Returns: <string[]>
//
// Example: split('a,b,c,d', ',', 2)
// Result: ['c', 'd']


var rsplit = function rsplit(s) {
  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';
  var limit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
  var result = [];
  if (limit === -1) limit = Number.MAX_VALUE;
  var count = 0;

  while (limit > count) {
    var i = s.lastIndexOf(separator);

    if (i < 0) {
      result.unshift(s);
      return result;
    }

    result.unshift(s.slice(i + separator.length));
    s = s.slice(0, i);
    count++;
  }

  return result;
}; // Normalize email address according to OWASP recommendations
//   email - <string>, email address to normalize
// Returns: <string>, normalized email address


var normalizeEmail = function normalizeEmail(email) {
  var at = email.lastIndexOf('@');
  var domain = email.slice(at).toLowerCase();
  return email.slice(0, at) + domain;
};

module.exports = {
  subst: subst,
  htmlEscape: htmlEscape,
  fileExt: fileExt,
  removeExt: removeExt,
  spinalToCamel: spinalToCamel,
  escapeRegExp: escapeRegExp,
  newEscapedRegExp: newEscapedRegExp,
  addTrailingSlash: addTrailingSlash,
  stripTrailingSlash: stripTrailingSlash,
  dirname: dirname,
  capitalize: capitalize,
  between: between,
  removeBOM: removeBOM,
  arrayRegExp: arrayRegExp,
  section: section,
  rsection: rsection,
  split: split,
  rsplit: rsplit,
  normalizeEmail: normalizeEmail,
  ALPHA_UPPER: ALPHA_UPPER,
  ALPHA_LOWER: ALPHA_LOWER,
  ALPHA: ALPHA,
  DIGIT: DIGIT,
  ALPHA_DIGIT: ALPHA_DIGIT
};