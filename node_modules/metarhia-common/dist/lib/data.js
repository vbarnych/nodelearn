'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var SCALAR_TYPES = ['boolean', 'number', 'string', 'undefined']; // Check if value is scalar
//   value - <any>
// Returns: <boolean>

var isScalar = function isScalar(value) {
  return SCALAR_TYPES.includes(_typeof(value));
}; // Copy dataset (copy objects to new array)
//   ds - <Object[]>, source dataset to be copied
// Returns: <Object[]>


var copy = function copy(ds) {
  return ds.slice();
};

var _cloneArray = null;
var _cloneObject = null; // Clone object or array
//   obj - <Object> | <Array>
// Returns: <Object> | <Array>

var clone = function clone(obj) {
  if (_typeof(obj) !== 'object' || obj === null) return obj;
  return Array.isArray(obj) ? _cloneArray(obj) : _cloneObject(obj);
};

_cloneArray = function cloneArray(arr) {
  var size = arr.length;
  var array = new Array(size);

  for (var i = 0; i < size; i++) {
    var val = arr[i];

    if (_typeof(val) !== 'object' || val === null) {
      array[i] = val;
    } else if (Array.isArray(val)) {
      array[i] = _cloneArray(val);
    } else {
      array[i] = _cloneObject(val);
    }
  }

  return array;
};

_cloneObject = function cloneObject(obj) {
  var object = {};
  var keys = Object.keys(obj);

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var val = obj[key];

    if (_typeof(val) !== 'object' || val === null) {
      object[key] = val;
    } else if (Array.isArray(val)) {
      object[key] = _cloneArray(val);
    } else {
      object[key] = _cloneObject(val);
    }
  }

  return object;
};

var _duplicateArray = null;
var _duplicateObject = null; // Duplicate object or array (properly handles prototype and circular links)
//   obj - <Object> | <Array>
// Returns: <Object> | <Array>

var duplicate = function duplicate(obj) {
  if (_typeof(obj) !== 'object' || obj === null) return obj;
  var references = new Map();
  var dup = Array.isArray(obj) ? _duplicateArray : _duplicateObject;
  return dup(obj, references);
};

_duplicateArray = function duplicateArray(arr, references) {
  var size = arr.length;
  var array = new Array(size);
  references.set(arr, array);

  for (var i = 0; i < size; i++) {
    var val = arr[i];

    if (references.has(val)) {
      array[i] = references.get(val);
    } else if (_typeof(val) !== 'object' || val === null) {
      array[i] = val;
    } else if (Array.isArray(val)) {
      array[i] = _duplicateArray(val, references);
    } else {
      array[i] = _duplicateObject(val, references);
    }
  }

  return array;
};

_duplicateObject = function duplicateObject(obj, references) {
  var object;

  if (!obj.constructor) {
    object = Object.create(null);
  } else if (obj.constructor.name !== 'Object') {
    object = new obj.constructor(obj.toString());
  } else {
    object = {};
  }

  references.set(obj, object);
  var keys = Object.keys(obj);

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var val = obj[key];

    if (references.has(val)) {
      object[key] = references.get(val);
    } else if (_typeof(val) !== 'object' || val === null) {
      object[key] = val;
    } else if (Array.isArray(val)) {
      object[key] = _duplicateArray(val, references);
    } else {
      object[key] = _duplicateObject(val, references);
    }
  }

  return object;
}; // Read property by dot-separated path
//   data - <Object>
//   dataPath - <string>, dot-separated path
// Returns: <any>, value


var getByPath = function getByPath(data, dataPath) {
  var path = dataPath.split('.');
  var obj = data;

  for (var i = 0; i < path.length; i++) {
    var prop = path[i];
    var next = obj[prop];
    if (next === undefined || next === null) return next;
    obj = next;
  }

  return obj;
}; // Set property by dot-separated path
//   data - <Object>
//   dataPath - <string>, dot-separated path
//   value - <any>, new value


var setByPath = function setByPath(data, dataPath, value) {
  var path = dataPath.split('.');
  var len = path.length;
  var obj = data;
  var i = 0,
      next,
      prop;

  for (;;) {
    if (_typeof(obj) !== 'object') return false;
    prop = path[i];

    if (i === len - 1) {
      obj[prop] = value;
      return true;
    }

    next = obj[prop];

    if (next === undefined || next === null) {
      next = {};
      obj[prop] = next;
    }

    obj = next;
    i++;
  }
}; // Delete property by dot-separated path
//   data - <Object>
//   dataPath - <string>, dot-separated path
// Returns: <boolean>


var deleteByPath = function deleteByPath(data, dataPath) {
  var path = dataPath.split('.');
  var obj = data;
  var len = path.length;

  for (var i = 0; i < len; i++) {
    var prop = path[i];
    var next = obj[prop];

    if (i === len - 1) {
      if (obj.hasOwnProperty(prop)) {
        delete obj[prop];
        return true;
      }
    } else {
      if (next === undefined || next === null) return false;
      obj = next;
    }
  }

  return false;
}; // Distinctly merge multiple arrays
//   args - <Array[]>, arrays with elements to be merged
// Returns: <Array>


var merge = function merge() {
  var unique = new Set();
  var ilen = arguments.length;

  for (var i = 0; i < ilen; i++) {
    var arr = i < 0 || arguments.length <= i ? undefined : arguments[i];

    for (var j = 0; j < arr.length; j++) {
      unique.add(arr[j]);
    }
  }

  return _toConsumableArray(unique);
}; // Merge multiple objects with merger
//   merger - <Function>
//   objs - <Object[]>, objects to be merged
// Returns: <Object>


var mergeObjects = function mergeObjects(merger) {
  var keys = new Set();

  for (var _len = arguments.length, objs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    objs[_key - 1] = arguments[_key];
  }

  for (var _i = 0; _i < objs.length; _i++) {
    var obj = objs[_i];

    for (var key in obj) {
      keys.add(key);
    }
  }

  var result = {};
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _key2 = _step.value;
      var args = new Array(objs.length);

      for (var i = 0; i < objs.length; ++i) {
        args[i] = objs[i][_key2];
      }

      result[_key2] = merger.apply(void 0, args);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return result;
};

module.exports = {
  isScalar: isScalar,
  copy: copy,
  clone: clone,
  duplicate: duplicate,
  getByPath: getByPath,
  setByPath: setByPath,
  deleteByPath: deleteByPath,
  merge: merge,
  mergeObjects: mergeObjects
};