'use strict';

var _require = require('./array'),
    last = _require.last;

var _require2 = require('./utilities'),
    alias = _require2.alias; // Empty function
// Returns: <boolean>, always false


var falseness = function falseness() {
  return false;
}; // Empty function
// Returns: <boolean>, always true


var trueness = function trueness() {
  return true;
}; // Empty function


var emptiness = function emptiness() {}; // Empty asynchronous callback-last single-argument function
//   callback - <Function>, callback to be called with (null)


var nop = function nop(callback) {
  callback(null);
}; // Empty asynchronous callback-last double-argument function
//   empty - <any>, incoming value to be ignored
//   callback - <Function>, callback to be called with (null, null)


var noop = function noop(empty, callback) {
  callback(null, null);
}; // Wrap function: call once, not null
//   fn - <Function>, (optional)
// Returns: <Function>, wrapped callback


var once = function once(fn) {
  if (!fn) return emptiness;
  var finished = false;

  var wrap = function wrap() {
    if (finished) return;
    finished = true;
    fn.apply(void 0, arguments);
  };

  return wrap;
}; // Extract callback function
// It's unsafe: may return null, allows multiple calls
//   args - <Array>, arguments
// Returns: <Function> | <null>, callback if any


var unsafeCallback = function unsafeCallback(args) {
  var callback = last(args);
  if (typeof callback === 'function') return args.pop();
  return null;
}; // Extract callback
//   args - <Array>, arguments
// Returns: <Function>, callback or common.emptiness if there is no callback


var safeCallback = function safeCallback(args) {
  var callback = last(args);
  if (typeof callback === 'function') return args.pop();
  return emptiness;
}; // Extract callback
//   args - <Array>, arguments
// Returns: <Function>, extracted callback
// Throws: <TypeError>, if there is no callback


var requiredCallback = function requiredCallback(args) {
  var callback = last(args);
  if (typeof callback === 'function') return args.pop();
  throw new TypeError('No callback provided');
}; // Extract callback and make it safe
// Wrap callback with once()
//   args - <Array>, arguments
// Returns: <Function>, callback or common.emptiness if there is no callback


var onceCallback = function onceCallback(args) {
  var callback = last(args);
  if (typeof callback === 'function') return once(args.pop());
  return emptiness;
}; // Check function
//   fn - <Function>
// Returns: <Function> | <null>, function or null if fn is not a function


var unsafeFunction = function unsafeFunction(fn) {
  return typeof fn === 'function' ? fn : null;
}; // Check function and make it safe
//   fn - <Function>
// Returns: <Function>, function or `common.emptiness` if fn is not a function


var safeFunction = function safeFunction(fn) {
  return typeof fn === 'function' ? fn : emptiness;
};

module.exports = {
  falseness: falseness,
  trueness: trueness,
  emptiness: emptiness,
  nop: nop,
  noop: noop,
  once: once,
  cb: alias(once),
  unsafeCallback: unsafeCallback,
  extractCallback: alias(unsafeCallback),
  cbUnsafe: alias(unsafeCallback),
  safeCallback: safeCallback,
  cbExtract: alias(safeCallback),
  requiredCallback: requiredCallback,
  onceCallback: onceCallback,
  safeFunction: safeFunction,
  unsafeFunction: unsafeFunction
};