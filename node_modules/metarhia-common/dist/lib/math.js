'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var crypto = require('crypto');

var CryptoRandomPrefetcher =
/*#__PURE__*/
function () {
  function CryptoRandomPrefetcher(bufSize, valueSize) {
    _classCallCheck(this, CryptoRandomPrefetcher);

    this.buf = crypto.randomBytes(bufSize);
    this.pos = 0;
    this.vsz = valueSize;
  } // Return Buffer with next `valueSize` random bytes.


  _createClass(CryptoRandomPrefetcher, [{
    key: "next",
    value: function next() {
      if (this.pos === this.buf.length) {
        this.pos = 0;
        crypto.randomFillSync(this.buf);
      }

      var end = this.pos + this.vsz;
      var buf = this.buf.slice(this.pos, end);
      this.pos = end;
      return buf;
    }
  }]);

  return CryptoRandomPrefetcher;
}(); // Create prefetcher to use when crypto.randomBytes is required to generate
// multiple same-size values. `bufSize` must be a multiple of `valueSize` for
// this to work.
//   bufSize - <number>, size in bytes of the buffer to preallocate
//   valueSize - <number>, size in bytes of the produced chunks


var cryptoPrefetcher = function cryptoPrefetcher(bufSize, valueSize) {
  return new CryptoRandomPrefetcher(bufSize, valueSize);
}; // Generate random integer value in given range
//   min - <number>, range start
//   max - <number>, range end
// Returns: <number>


var random = function random(min, max) {
  if (max === undefined) {
    max = min;
    min = 0;
  }

  return min + Math.floor(Math.random() * (max - min + 1));
};

var randPrefetcher = cryptoPrefetcher(4096, 4);
var UINT32_MAX = 0xFFFFFFFF; // Generate random number in the range from 0 inclusive up to
// but not including 1 (same as Math.random),
// using crypto-secure number generator.
// Returns: <number>

var cryptoRandom = function cryptoRandom() {
  return randPrefetcher.next().readUInt32LE(0, true) / (UINT32_MAX + 1);
};

module.exports = {
  cryptoPrefetcher: cryptoPrefetcher,
  random: random,
  cryptoRandom: cryptoRandom
};