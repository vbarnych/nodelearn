'use strict';

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var NaE = Symbol('NotAnEnum');

var Enum =
/*#__PURE__*/
function () {
  function Enum() {
    _classCallCheck(this, Enum);
  }

  _createClass(Enum, null, [{
    key: "from",
    value: function from() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var values = args[0];

      if (_typeof(values) !== 'object') {
        values = args;
      }

      var enumValues = new Map();

      var EnumClass =
      /*#__PURE__*/
      function (_Enum) {
        _inherits(EnumClass, _Enum);

        function EnumClass() {
          _classCallCheck(this, EnumClass);

          return _possibleConstructorReturn(this, _getPrototypeOf(EnumClass).apply(this, arguments));
        }

        _createClass(EnumClass, [{
          key: Symbol.toPrimitive,
          value: function value() {
            return this.index;
          }
        }], [{
          key: "from",
          value: function from(val) {
            return enumValues.get(val) || Enum.NaE;
          }
        }, {
          key: "has",
          value: function has(value) {
            return enumValues.has(value);
          }
        }, {
          key: "key",
          value: function key(value) {
            var e = enumValues.get(value);
            return e ? e.index : undefined;
          }
        }, {
          key: "values",
          get: function get() {
            return values;
          }
        }]);

        return EnumClass;
      }(Enum);

      var withData = !Array.isArray(values);
      var i = 0;

      for (var key in values) {
        var e = new EnumClass();
        e.index = i++;

        if (withData) {
          e.value = key;
          e.data = values[key];
        } else {
          e.value = values[key];
        }

        enumValues.set(e.value, e);
      }

      return EnumClass;
    }
  }]);

  return Enum;
}();

Object.defineProperty(Enum, 'NaE', {
  configurable: false,
  enumerable: false,
  writable: false,
  value: NaE
});
module.exports = {
  Enum: Enum
};