'use strict';

var util = require('util');

var _require = require('events'),
    EventEmitter = _require.EventEmitter; // Forward an event from one EventEmitter to another
//   from - <EventEmitter>, to listen for event
//   to - <EventEmitter>, to emit event on
//   event - <string>, event name
//   newEvent - <string>, (optional), default: `event`, forwarded event name


var forwardEvent = function forwardEvent(from, to, event) {
  var newEvent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : event;

  if (event === '*') {
    from.on(event, function (eventName) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      to.emit.apply(to, [eventName].concat(args));
    });
  } else {
    from.on(event, function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      to.emit.apply(to, [newEvent].concat(args));
    });
  }
}; // Forward events from one EventEmitter to another
//   from - <EventEmitter>, to listen for event
//   to - <EventEmitter>, to emit event on
//   events - <string> | <Object> | <string[]>, (optional), events names
//
// Example: forwardEvents(from, to);
// Example: forwardEvents(from, to, 'eventName');
// Example: forwardEvents(from, to, { eventName: 'newEventName' });
// Example: forwardEvents(from, to, ['eventName1', 'eventName2']);


var forwardEvents = function forwardEvents(from, to, events) {
  if (!events) {
    forwardEvent(from, to, '*');
    return;
  }

  if (typeof events === 'string') {
    forwardEvent(from, to, events);
    return;
  }

  if (Array.isArray(events)) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = events[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var event = _step.value;
        forwardEvent(from, to, event);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return;
  }

  for (var _event in events) {
    forwardEvent(from, to, _event, events[_event]);
  }
};

function EnhancedEmitter() {
  EventEmitter.call(this);
}

util.inherits(EnhancedEmitter, EventEmitter);
var emit = EventEmitter.prototype.emit; // Call listener with provided arguments
//   args - <Array>, arguments to be passed

EnhancedEmitter.prototype.emit = function () {
  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }

  emit.call.apply(emit, [this, '*'].concat(args));
  emit.call.apply(emit, [this].concat(args));
}; // Forward events from one EventEmitter to another
//   to - <EventEmitter>, to emit event on
//   events - <string> | <Object> | <string[]>, events names


EnhancedEmitter.prototype.forward = function (to, events) {
  forwardEvents(this, to, events);
}; // Create EnhancedEmitter, enhanced EventEmitter
// with wildcard and forward method
// Returns: <EventEmitter>


var emitter = function emitter() {
  return new EnhancedEmitter();
};

module.exports = {
  forwardEvents: forwardEvents,
  emitter: emitter
};