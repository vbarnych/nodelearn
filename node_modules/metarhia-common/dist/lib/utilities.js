'use strict';

var _require = require('path'),
    basename = _require.basename;

var _require2 = require('./strings'),
    between = _require2.between; // Wrap method to mark it as deprecated
//   fn - <Function>
// Returns: <Function>, wrapped with deprecation warning
//   args - <Array>, arguments to be passed to wrapped function


var deprecate = function deprecate(fn) {
  var warned = false;

  var wrap = function wrap() {
    if (!warned) {
      var err = new Error("Warning: method ".concat(fn.name, " is deprecated"));
      console.warn(err);
      warned = true;
    }

    return fn.apply(void 0, arguments);
  };

  return wrap;
}; // Wrap new method to mark old alias as deprecated
//   fn - <Function>
// Returns: <Function>, wrapped with deprecation warning
//   args - <Array>, arguments to be passed to wrapped function


var alias = function alias(fn) {
  var warned = false;

  var wrap = function wrap() {
    if (!warned) {
      var err = new Error();
      var name = between(err.stack, '[', ']');
      err.message = "Warning: use ".concat(fn.name, " instead of deprecated ").concat(name);
      err.stack = err.stack.replace('Error', err.message);
      console.warn(err);
      warned = true;
    }

    return fn.apply(void 0, arguments);
  };

  return wrap;
}; // Make function raise-safe
//   fn - <Function>
// Returns: <Function>, wrapped with try/catch interception
//   args - <Array>, arguments to be passed to wrapped function


var safe = function safe(fn) {
  return function () {
    try {
      return [null, fn.apply(void 0, arguments)];
    } catch (err) {
      return [err, null];
    }
  };
};

var nodeModuleMatch = /internal[/\\]modules[/\\](cjs|esm)[/\\]/;

var callerFilepath = function callerFilepath() {
  var depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var stack = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  if (!stack) {
    var origLimit = Error.stackTraceLimit;
    Error.stackTraceLimit = 50;
    stack = new Error().stack;
    Error.stackTraceLimit = origLimit;
  } // remove first 'Error' line and this function


  stack = stack.split('\n').slice(2);
  if (depth > stack.length - 1) depth = stack.length - 1;
  if (depth > 0) stack = stack.slice(depth);
  var frame = null;

  do {
    frame = stack.shift();
  } while (frame && nodeModuleMatch.test(frame));

  if (frame) {
    var start = frame.indexOf('(');
    var end = frame.indexOf(':', start + 1);
    return frame.substring(start + 1, end);
  }

  return '';
};

var callerFilename = function callerFilename() {
  var depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var stack = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  return basename(callerFilepath(depth + 1, stack) || '');
};

module.exports = {
  deprecate: deprecate,
  alias: alias,
  safe: safe,
  callerFilename: callerFilename,
  callerFilepath: callerFilepath
};