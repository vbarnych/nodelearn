/* eslint-disable no-use-before-define */
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var toIterator = function toIterator(base) {
  if (!base[Symbol.iterator]) {
    throw new TypeError('Base is not Iterable');
  }

  return base[Symbol.iterator]();
};

var Iterator =
/*#__PURE__*/
function () {
  function Iterator(base) {
    _classCallCheck(this, Iterator);

    this.base = toIterator(base);
  }

  _createClass(Iterator, [{
    key: Symbol.iterator,
    value: function value() {
      return this;
    }
  }, {
    key: "next",
    value: function next() {
      return this.base.next();
    }
  }, {
    key: "count",
    value: function count() {
      var count = 0;

      while (!this.next().done) {
        count++;
      }

      return count;
    }
  }, {
    key: "each",
    value: function each(fn, thisArg) {
      this.forEach(fn, thisArg);
    }
  }, {
    key: "forEach",
    value: function forEach(fn, thisArg) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var value = _step.value;
          fn.call(thisArg, value);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: "every",
    value: function every(predicate, thisArg) {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var value = _step2.value;

          if (!predicate.call(thisArg, value)) {
            return false;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return true;
    }
  }, {
    key: "find",
    value: function find(predicate, thisArg) {
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = this[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var value = _step3.value;

          if (predicate.call(thisArg, value)) {
            return value;
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      return undefined;
    }
  }, {
    key: "includes",
    value: function includes(element) {
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = this[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var value = _step4.value;

          if (value === element || isNaN(value) && isNaN(element)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      return false;
    }
  }, {
    key: "reduce",
    value: function reduce(reducer, initialValue) {
      var result = initialValue;

      if (result === undefined) {
        var next = this.next();

        if (next.done) {
          throw new TypeError('Reduce of consumed iterator with no initial value');
        }

        result = next.value;
      }

      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = this[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var value = _step5.value;
          result = reducer(result, value);
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      return result;
    }
  }, {
    key: "some",
    value: function some(predicate, thisArg) {
      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = this[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var value = _step6.value;

          if (predicate.call(thisArg, value)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
            _iterator6.return();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }

      return false;
    }
  }, {
    key: "someCount",
    value: function someCount(predicate, count, thisArg) {
      var n = 0;
      var _iteratorNormalCompletion7 = true;
      var _didIteratorError7 = false;
      var _iteratorError7 = undefined;

      try {
        for (var _iterator7 = this[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
          var value = _step7.value;

          if (predicate.call(thisArg, value)) {
            if (++n === count) return true;
          }
        }
      } catch (err) {
        _didIteratorError7 = true;
        _iteratorError7 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
            _iterator7.return();
          }
        } finally {
          if (_didIteratorError7) {
            throw _iteratorError7;
          }
        }
      }

      return false;
    }
  }, {
    key: "collectTo",
    value: function collectTo(CollectionClass) {
      return new CollectionClass(this);
    }
  }, {
    key: "collectWith",
    value: function collectWith(obj, collector) {
      this.forEach(function (element) {
        return collector(obj, element);
      });
    }
  }, {
    key: "toArray",
    value: function toArray() {
      return Array.from(this);
    }
  }, {
    key: "map",
    value: function map(mapper, thisArg) {
      return new MapIterator(this, mapper, thisArg);
    }
  }, {
    key: "filter",
    value: function filter(predicate, thisArg) {
      return new FilterIterator(this, predicate, thisArg);
    }
  }, {
    key: "flat",
    value: function flat() {
      var depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      return new FlatIterator(this, depth);
    }
  }, {
    key: "flatMap",
    value: function flatMap(mapper, thisArg) {
      return new FlatMapIterator(this, mapper, thisArg);
    }
  }, {
    key: "zip",
    value: function zip() {
      for (var _len = arguments.length, iterators = new Array(_len), _key = 0; _key < _len; _key++) {
        iterators[_key] = arguments[_key];
      }

      return new ZipIterator(this, iterators);
    }
  }, {
    key: "join",
    value: function join() {
      for (var _len2 = arguments.length, iterators = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        iterators[_key2] = arguments[_key2];
      }

      return new JoinIterator(this, iterators);
    }
  }, {
    key: "take",
    value: function take(amount) {
      return new TakeIterator(this, amount);
    }
  }, {
    key: "takeWhile",
    value: function takeWhile(predicate, thisArg) {
      return new TakeWhileIterator(this, predicate, thisArg);
    }
  }, {
    key: "skip",
    value: function skip(amount) {
      for (var i = 0; i < amount; i++) {
        this.next();
      }

      return this;
    }
  }, {
    key: "enumerate",
    value: function enumerate() {
      return new EnumerateIterator(this);
    }
  }]);

  return Iterator;
}();

var MapIterator =
/*#__PURE__*/
function (_Iterator) {
  _inherits(MapIterator, _Iterator);

  function MapIterator(base, mapper, thisArg) {
    var _this;

    _classCallCheck(this, MapIterator);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapIterator).call(this, base));
    _this.mapper = mapper;
    _this.thisArg = thisArg;
    return _this;
  }

  _createClass(MapIterator, [{
    key: "next",
    value: function next() {
      var _this$base$next = this.base.next(),
          done = _this$base$next.done,
          value = _this$base$next.value;

      return {
        done: done,
        value: done ? undefined : this.mapper.call(this.thisArg, value)
      };
    }
  }]);

  return MapIterator;
}(Iterator);

var FilterIterator =
/*#__PURE__*/
function (_Iterator2) {
  _inherits(FilterIterator, _Iterator2);

  function FilterIterator(base, predicate, thisArg) {
    var _this2;

    _classCallCheck(this, FilterIterator);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(FilterIterator).call(this, base));
    _this2.predicate = predicate;
    _this2.thisArg = thisArg;
    return _this2;
  }

  _createClass(FilterIterator, [{
    key: "next",
    value: function next() {
      var _iteratorNormalCompletion8 = true;
      var _didIteratorError8 = false;
      var _iteratorError8 = undefined;

      try {
        for (var _iterator8 = this.base[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
          var value = _step8.value;

          if (this.predicate.call(this.thisArg, value)) {
            return {
              done: false,
              value: value
            };
          }
        }
      } catch (err) {
        _didIteratorError8 = true;
        _iteratorError8 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion8 && _iterator8.return != null) {
            _iterator8.return();
          }
        } finally {
          if (_didIteratorError8) {
            throw _iteratorError8;
          }
        }
      }

      return {
        done: true,
        value: undefined
      };
    }
  }]);

  return FilterIterator;
}(Iterator);

var FlatIterator =
/*#__PURE__*/
function (_Iterator3) {
  _inherits(FlatIterator, _Iterator3);

  function FlatIterator(base, depth) {
    var _this3;

    _classCallCheck(this, FlatIterator);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(FlatIterator).call(this, base));
    _this3.currentDepth = 0;
    _this3.stack = new Array(depth + 1);
    _this3.stack[0] = base;
    return _this3;
  }

  _createClass(FlatIterator, [{
    key: "next",
    value: function next() {
      while (this.currentDepth >= 0) {
        var top = this.stack[this.currentDepth];
        var next = top.next();

        if (next.done) {
          this.stack[this.currentDepth] = null;
          this.currentDepth--;
          continue;
        }

        if (this.currentDepth === this.stack.length - 1 || !next.value[Symbol.iterator]) {
          return next;
        }

        this.stack[++this.currentDepth] = next.value[Symbol.iterator]();
      }

      return {
        done: true,
        value: undefined
      };
    }
  }]);

  return FlatIterator;
}(Iterator);

var FlatMapIterator =
/*#__PURE__*/
function (_Iterator4) {
  _inherits(FlatMapIterator, _Iterator4);

  function FlatMapIterator(base, mapper, thisArg) {
    var _this4;

    _classCallCheck(this, FlatMapIterator);

    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(FlatMapIterator).call(this, base));
    _this4.mapper = mapper;
    _this4.thisArg = thisArg;
    _this4.currentIterator = null;
    return _this4;
  }

  _createClass(FlatMapIterator, [{
    key: "next",
    value: function next() {
      if (!this.currentIterator) {
        var _next = this.base.next();

        if (_next.done) {
          return _next;
        }

        var value = this.mapper.call(this.thisArg, _next.value);

        if (!value[Symbol.iterator]) {
          return {
            done: false,
            value: value
          };
        }

        this.currentIterator = toIterator(value);
      }

      var next = this.currentIterator.next();

      if (next.done) {
        this.currentIterator = null;
        return this.next();
      }

      return next;
    }
  }]);

  return FlatMapIterator;
}(Iterator);

var TakeIterator =
/*#__PURE__*/
function (_Iterator5) {
  _inherits(TakeIterator, _Iterator5);

  function TakeIterator(base, amount) {
    var _this5;

    _classCallCheck(this, TakeIterator);

    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(TakeIterator).call(this, base));
    _this5.amount = amount;
    _this5.iterated = 0;
    return _this5;
  }

  _createClass(TakeIterator, [{
    key: "next",
    value: function next() {
      this.iterated++;

      if (this.iterated <= this.amount) {
        return this.base.next();
      }

      return {
        done: true,
        value: undefined
      };
    }
  }]);

  return TakeIterator;
}(Iterator);

var TakeWhileIterator =
/*#__PURE__*/
function (_Iterator6) {
  _inherits(TakeWhileIterator, _Iterator6);

  function TakeWhileIterator(base, predicate, thisArg) {
    var _this6;

    _classCallCheck(this, TakeWhileIterator);

    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(TakeWhileIterator).call(this, base));
    _this6.predicate = predicate;
    _this6.thisArg = thisArg;
    _this6.done = false;
    return _this6;
  }

  _createClass(TakeWhileIterator, [{
    key: "next",
    value: function next() {
      if (this.done) return {
        done: true,
        value: undefined
      };
      var next = this.base.next();

      if (!next.done && this.predicate.call(this.thisArg, next.value)) {
        return next;
      }

      this.done = true;
      return {
        done: true,
        value: undefined
      };
    }
  }]);

  return TakeWhileIterator;
}(Iterator);

var ZipIterator =
/*#__PURE__*/
function (_Iterator7) {
  _inherits(ZipIterator, _Iterator7);

  function ZipIterator(base, iterators) {
    var _this7;

    _classCallCheck(this, ZipIterator);

    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(ZipIterator).call(this, base));
    _this7.iterators = iterators.map(toIterator);
    return _this7;
  }

  _createClass(ZipIterator, [{
    key: "next",
    value: function next() {
      var result = [];
      var next = this.base.next();

      if (next.done) {
        return next;
      }

      result.push(next.value);
      var _iteratorNormalCompletion9 = true;
      var _didIteratorError9 = false;
      var _iteratorError9 = undefined;

      try {
        for (var _iterator9 = this.iterators[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
          var iterator = _step9.value;

          var _next2 = iterator.next();

          if (_next2.done) {
            return _next2;
          }

          result.push(_next2.value);
        }
      } catch (err) {
        _didIteratorError9 = true;
        _iteratorError9 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion9 && _iterator9.return != null) {
            _iterator9.return();
          }
        } finally {
          if (_didIteratorError9) {
            throw _iteratorError9;
          }
        }
      }

      return {
        done: false,
        value: result
      };
    }
  }]);

  return ZipIterator;
}(Iterator);

var JoinIterator =
/*#__PURE__*/
function (_Iterator8) {
  _inherits(JoinIterator, _Iterator8);

  function JoinIterator(base, iterators) {
    var _this8;

    _classCallCheck(this, JoinIterator);

    _this8 = _possibleConstructorReturn(this, _getPrototypeOf(JoinIterator).call(this, base));
    _this8.currentIterator = base;
    _this8.iterators = iterators.map(toIterator)[Symbol.iterator]();
    return _this8;
  }

  _createClass(JoinIterator, [{
    key: "next",
    value: function next() {
      var next = this.currentIterator.next();

      if (!next.done) {
        return next;
      }

      var iterator = this.iterators.next();

      if (iterator.done) {
        return iterator;
      }

      this.currentIterator = iterator.value;
      return this.next();
    }
  }]);

  return JoinIterator;
}(Iterator);

var EnumerateIterator =
/*#__PURE__*/
function (_Iterator9) {
  _inherits(EnumerateIterator, _Iterator9);

  function EnumerateIterator(base) {
    var _this9;

    _classCallCheck(this, EnumerateIterator);

    _this9 = _possibleConstructorReturn(this, _getPrototypeOf(EnumerateIterator).call(this, base));
    _this9.index = 0;
    return _this9;
  }

  _createClass(EnumerateIterator, [{
    key: "next",
    value: function next() {
      var next = this.base.next();

      if (next.done) {
        return next;
      }

      return {
        done: false,
        value: [this.index++, next.value]
      };
    }
  }]);

  return EnumerateIterator;
}(Iterator);

var iter = function iter(base) {
  return new Iterator(base);
};

module.exports = {
  Iterator: Iterator,
  iter: iter
};